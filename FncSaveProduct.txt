import { DynamoDBClient } from "@aws-sdk/client-dynamodb";
import { PutItemCommand } from "@aws-sdk/client-dynamodb";

// Criando o cliente DynamoDB
const client = new DynamoDBClient({
  region: "us-east-1",
});

// Função Lambda
export const handler = async (event) => {
  let body = "";
  let statusCode = 200;
  const table = "products"; // Nome da tabela do DynamoDB
  const headers = {
    "Content-Type": "application/json",
    "Access-Control-Allow-Headers": "*",
  };

  // Obtendo o produto do corpo da requisição
  const product = JSON.parse(event.body);

  // Validando se o productId está presente
  const { id, nome, preco } = product;
  
  if (!id || !nome || !preco) {
    statusCode = 400;
    body = JSON.stringify({ message: "Missing required fields: id, nome, preco" });
    return {
      statusCode,
      body,
      headers,
    };
  }

  try {
    // Comando PutItem para inserir ou atualizar um item na tabela
    const params = {
      TableName: table,
      Item: {
        id: { S: id }, // Chave primária
        nome: { S: nome }, // Nome do produto
        preco: { N: preco.toString() }, // Preço do produto
      },
    };

    const command = new PutItemCommand(params);
    await client.send(command);

    body = `Product with productId ${id} has been successfully added/updated.`;
  } catch (err) {
    statusCode = 400;
    body = JSON.stringify({ message: err.message });
  } finally {
    body = JSON.stringify(body);
  }

  // Retorno da função Lambda
  return {
    statusCode,
    body,
    headers,
  };
};